[{"type":"js","data":"/* Imports for global scope */\n\nMongo = Package.mongo.Mongo;\nSession = Package.session.Session;\n$ = Package.jquery.$;\njQuery = Package.jquery.jQuery;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nDate = Package['es5-shim'].Date;\nparseInt = Package['es5-shim'].parseInt;\nECMAScript = Package.ecmascript.ECMAScript;\nMeteor = Package.meteor.Meteor;\nWebApp = Package.webapp.WebApp;\n_ = Package.underscore._;\nDDP = Package['ddp-client'].DDP;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nSpacebars = Package.spacebars.Spacebars;\nTemplate = Package.templating.Template;\nbabelHelpers = Package['babel-runtime'].babelHelpers;\nSymbol = Package['ecmascript-runtime'].Symbol;\nMap = Package['ecmascript-runtime'].Map;\nSet = Package['ecmascript-runtime'].Set;\nPromise = Package.promise.Promise;\nAutoupdate = Package.autoupdate.Autoupdate;\nReload = Package.reload.Reload;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/packages/global-imports.js"},{"type":"js","data":"(function(){\nTemplate.body.addContent((function() {\n  var view = this;\n  return Spacebars.include(view.lookupTemplate(\"game\"));\n}));\nMeteor.startup(Template.body.renderToDocument);\n\nTemplate.__checkName(\"game\");\nTemplate[\"game\"] = new Template(\"Template.game\", (function() {\n  var view = this;\n  return Blaze.View(\"lookup:game\", function() {\n    return Spacebars.mustache(view.lookup(\"game\"));\n  });\n}));\n\n}).call(this);\n","servePath":"/template.example-meteor.js","sourceMap":{"version":3,"sources":["meteor://ðŸ’»app/template.example-meteor.js"],"names":[],"mappings":"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"/template.example-meteor.js","sourcesContent":["\nTemplate.body.addContent((function() {\n  var view = this;\n  return Spacebars.include(view.lookupTemplate(\"game\"));\n}));\nMeteor.startup(Template.body.renderToDocument);\n\nTemplate.__checkName(\"game\");\nTemplate[\"game\"] = new Template(\"Template.game\", (function() {\n  var view = this;\n  return Blaze.View(\"lookup:game\", function() {\n    return Spacebars.mustache(view.lookup(\"game\"));\n  });\n}));\n"]}},{"type":"js","data":"(function(){\n\n/////////////////////////////////////////////////////////////////////////\n//                                                                     //\n// client/games/breakout.js                                            //\n//                                                                     //\n/////////////////////////////////////////////////////////////////////////\n                                                                       //\nvar game = new Phaser.Game(800, 600, Phaser.CANVAS, 'phaser-example', { preload: preload, create: create, update: update, render: render });\n                                                                       //\nfunction preload() {                                                   // 3\n                                                                       //\n    game.load.image('ball', '../public/assets/games/breakout/1.png');  // 5\n}                                                                      //\n                                                                       //\nvar snakeHead; //head of snake sprite                                  // 9\nvar snakeSection = new Array(); //array of sprites that make the snake body sections\nvar snakePath = new Array(); //arrary of positions(points) that have to be stored for the path the sections follow\nvar numSnakeSections = 10; //number of snake body sections             // 12\nvar snakeSpacer = 6; //parameter that sets the spacing between sections\n                                                                       //\nfunction create() {                                                    // 15\n                                                                       //\n    game.physics.startSystem(Phaser.Physics.ARCADE);                   // 17\n                                                                       //\n    game.world.setBounds(0, 0, 800, 600);                              // 19\n                                                                       //\n    cursors = game.input.keyboard.createCursorKeys();                  // 21\n                                                                       //\n    snakeHead = game.add.sprite(400, 300, 'ball');                     // 23\n    snakeHead.anchor.setTo(0.5, 0.5);                                  // 24\n                                                                       //\n    game.physics.enable(snakeHead, Phaser.Physics.ARCADE);             // 26\n                                                                       //\n    //  Init snakeSection array                                        //\n    for (var i = 1; i <= numSnakeSections - 1; i++) {                  // 29\n        snakeSection[i] = game.add.sprite(400, 300, 'ball');           // 31\n        snakeSection[i].anchor.setTo(0.5, 0.5);                        // 32\n    }                                                                  //\n                                                                       //\n    //  Init snakePath array                                           //\n    for (var i = 0; i <= numSnakeSections * snakeSpacer; i++) {        // 36\n        snakePath[i] = new Phaser.Point(400, 300);                     // 38\n    }                                                                  //\n}                                                                      //\n                                                                       //\nfunction update() {                                                    // 43\n                                                                       //\n    snakeHead.body.velocity.setTo(0, 0);                               // 45\n    snakeHead.body.angularVelocity = 0;                                // 46\n                                                                       //\n    if (cursors.up.isDown) {                                           // 48\n        snakeHead.body.velocity.copyFrom(game.physics.arcade.velocityFromAngle(snakeHead.angle, 300));\n                                                                       //\n        // Everytime the snake head moves, insert the new location at the start of the array,\n        // and knock the last position off the end                     //\n                                                                       //\n        var part = snakePath.pop();                                    // 55\n                                                                       //\n        part.setTo(snakeHead.x, snakeHead.y);                          // 57\n                                                                       //\n        snakePath.unshift(part);                                       // 59\n                                                                       //\n        for (var i = 1; i <= numSnakeSections - 1; i++) {              // 61\n            snakeSection[i].x = snakePath[i * snakeSpacer].x;          // 63\n            snakeSection[i].y = snakePath[i * snakeSpacer].y;          // 64\n        }                                                              //\n    }                                                                  //\n                                                                       //\n    if (cursors.left.isDown) {                                         // 68\n        snakeHead.body.angularVelocity = -300;                         // 70\n    } else if (cursors.right.isDown) {                                 //\n        snakeHead.body.angularVelocity = 300;                          // 74\n    }                                                                  //\n}                                                                      //\n                                                                       //\nfunction render() {                                                    // 79\n                                                                       //\n    game.debug.spriteInfo(snakeHead, 32, 32);                          // 81\n}                                                                      //\n/////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n","servePath":"/client/games/breakout.js","sourceMap":{"version":3,"sources":["/client/games/breakout.js"],"names":[],"mappings":";;;;;;;;AAAA,IAAI,IAAI,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,MAAM,CAAC,MAAM,EAAE,gBAAgB,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAC,MAAM,EAAG,MAAM,EAAE,CAAC,CAAC;;AAE5I,SAAS,OAAO,GAAG;;AAEf,QAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAC,uCAAuC,CAAC,CAAC;CAEnE;;AAED,IAAI,SAAS,CAAC;AACd,IAAI,YAAY,GAAG,IAAI,KAAK,EAAE,CAAC;AAC/B,IAAI,SAAS,GAAG,IAAI,KAAK,EAAE,CAAC;AAC5B,IAAI,gBAAgB,GAAG,EAAE,CAAC;AAC1B,IAAI,WAAW,GAAG,CAAC,CAAC;;AAEpB,SAAS,MAAM,GAAG;;AAEd,QAAI,CAAC,OAAO,CAAC,WAAW,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;;AAEhD,QAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;;AAErC,WAAO,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,gBAAgB,EAAE,CAAC;;AAEjD,aAAS,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,EAAE,GAAG,EAAE,MAAM,CAAC,CAAC;AAC9C,aAAS,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;;AAEjC,QAAI,CAAC,OAAO,CAAC,MAAM,CAAC,SAAS,EAAE,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;;;AAGtD,SAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,gBAAgB,GAAC,CAAC,EAAE,CAAC,EAAE,EAC5C;AACI,oBAAY,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,EAAE,GAAG,EAAE,MAAM,CAAC,CAAC;AACpD,oBAAY,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;KAC1C;;;AAGD,SAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,gBAAgB,GAAG,WAAW,EAAE,CAAC,EAAE,EACxD;AACI,iBAAS,CAAC,CAAC,CAAC,GAAG,IAAI,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;KAC7C;CAEJ;;AAED,SAAS,MAAM,GAAG;;AAEd,aAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACpC,aAAS,CAAC,IAAI,CAAC,eAAe,GAAG,CAAC,CAAC;;AAEnC,QAAI,OAAO,CAAC,EAAE,CAAC,MAAM,EACrB;AACI,iBAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,iBAAiB,CAAC,SAAS,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC;;;;;AAK9F,YAAI,IAAI,GAAG,SAAS,CAAC,GAAG,EAAE,CAAC;;AAE3B,YAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC;;AAErC,iBAAS,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;;AAExB,aAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,gBAAgB,GAAG,CAAC,EAAE,CAAC,EAAE,EAC9C;AACI,wBAAY,CAAC,CAAC,CAAC,CAAC,CAAC,GAAI,SAAS,CAAC,CAAC,GAAG,WAAW,CAAC,CAAE,CAAC,CAAC;AACnD,wBAAY,CAAC,CAAC,CAAC,CAAC,CAAC,GAAI,SAAS,CAAC,CAAC,GAAG,WAAW,CAAC,CAAE,CAAC,CAAC;SACtD;KACJ;;AAED,QAAI,OAAO,CAAC,IAAI,CAAC,MAAM,EACvB;AACI,iBAAS,CAAC,IAAI,CAAC,eAAe,GAAG,CAAC,GAAG,CAAC;KACzC,MACI,IAAI,OAAO,CAAC,KAAK,CAAC,MAAM,EAC7B;AACI,iBAAS,CAAC,IAAI,CAAC,eAAe,GAAG,GAAG,CAAC;KACxC;CAEJ;;AAED,SAAS,MAAM,GAAG;;AAEd,QAAI,CAAC,KAAK,CAAC,UAAU,CAAC,SAAS,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;CAE5C,wE","file":"/client/games/breakout.js","sourcesContent":["var game = new Phaser.Game(800, 600, Phaser.CANVAS, 'phaser-example', { preload: preload, create: create, update: update,render : render });\n\nfunction preload() {\n\n    game.load.image('ball','../public/assets/games/breakout/1.png');\n\n}\n\nvar snakeHead; //head of snake sprite\nvar snakeSection = new Array(); //array of sprites that make the snake body sections\nvar snakePath = new Array(); //arrary of positions(points) that have to be stored for the path the sections follow\nvar numSnakeSections = 10; //number of snake body sections\nvar snakeSpacer = 6; //parameter that sets the spacing between sections\n\nfunction create() {\n\n    game.physics.startSystem(Phaser.Physics.ARCADE);\n\n    game.world.setBounds(0, 0, 800, 600);\n\n    cursors = game.input.keyboard.createCursorKeys();\n\n    snakeHead = game.add.sprite(400, 300, 'ball');\n    snakeHead.anchor.setTo(0.5, 0.5);\n\n    game.physics.enable(snakeHead, Phaser.Physics.ARCADE);\n\n    //  Init snakeSection array\n    for (var i = 1; i <= numSnakeSections-1; i++)\n    {\n        snakeSection[i] = game.add.sprite(400, 300, 'ball');\n        snakeSection[i].anchor.setTo(0.5, 0.5);\n    }\n\n    //  Init snakePath array\n    for (var i = 0; i <= numSnakeSections * snakeSpacer; i++)\n    {\n        snakePath[i] = new Phaser.Point(400, 300);\n    }\n\n}\n\nfunction update() {\n\n    snakeHead.body.velocity.setTo(0, 0);\n    snakeHead.body.angularVelocity = 0;\n\n    if (cursors.up.isDown)\n    {\n        snakeHead.body.velocity.copyFrom(game.physics.arcade.velocityFromAngle(snakeHead.angle, 300));\n\n        // Everytime the snake head moves, insert the new location at the start of the array,\n        // and knock the last position off the end\n\n        var part = snakePath.pop();\n\n        part.setTo(snakeHead.x, snakeHead.y);\n\n        snakePath.unshift(part);\n\n        for (var i = 1; i <= numSnakeSections - 1; i++)\n        {\n            snakeSection[i].x = (snakePath[i * snakeSpacer]).x;\n            snakeSection[i].y = (snakePath[i * snakeSpacer]).y;\n        }\n    }\n\n    if (cursors.left.isDown)\n    {\n        snakeHead.body.angularVelocity = -300;\n    }\n    else if (cursors.right.isDown)\n    {\n        snakeHead.body.angularVelocity = 300;\n    }\n\n}\n\nfunction render() {\n\n    game.debug.spriteInfo(snakeHead, 32, 32);\n\n}\n"]}},{"type":"js","data":"(function(){\n\n/////////////////////////////////////////////////////////////////////////\n//                                                                     //\n// example-meteor.js                                                   //\n//                                                                     //\n/////////////////////////////////////////////////////////////////////////\n                                                                       //\nif (Meteor.isClient) {                                                 // 1\n  Template.game.helpers();                                             // 2\n}                                                                      //\n                                                                       //\n// game is a global var from /client/games/breakout.js                 //\nif (Meteor.isServer) {                                                 // 7\n  Meteor.startup(function () {                                         // 8\n    // code to run on server at startup                                //\n  });                                                                  //\n}                                                                      //\n/////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n","servePath":"/example-meteor.js","sourceMap":{"version":3,"sources":["meteor://ðŸ’»app/example-meteor.js"],"names":[],"mappings":";;;;;;;;AAAA,IAAI,MAAM,CAAC,QAAQ,EAAE;AACnB,UAAQ,CAAC,IAAI,CAAC,OAAO,EAEpB;CACF;;;AAED,IAAI,MAAM,CAAC,QAAQ,EAAE;AACnB,QAAM,CAAC,OAAO,CAAC,YAAY;;GAE1B,CAAC;CACH,wE","file":"/example-meteor.js","sourcesContent":["if (Meteor.isClient) {\n  Template.game.helpers(\n      // game is a global var from /client/games/breakout.js\n  )\n}\n\nif (Meteor.isServer) {\n  Meteor.startup(function () {\n    // code to run on server at startup\n  })\n}\n"]}}]