{"metadata":{"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}},"usedHelpers":[]},"ignored":false,"code":"var game = new Phaser.Game(800, 600, Phaser.CANVAS, 'phaser-example', { preload: preload, create: create, update: update, render: render });\n\nfunction preload() {\n\n    game.load.image('ball', './assets/games/breakout/emojis/1.png');\n}\n\nvar snakeHead; //head of snake sprite\nvar snakeSection = new Array(); //array of sprites that make the snake body sections\nvar snakePath = new Array(); //arrary of positions(points) that have to be stored for the path the sections follow\nvar numSnakeSections = 4; //number of snake body sections\nvar snakeSpacer = 10; //parameter that sets the spacing between sections\n\nfunction create() {\n\n    game.stage.backgroundColor = \"#FFF\";\n    game.physics.startSystem(Phaser.Physics.ARCADE);\n    game.world.setBounds(0, 0, 800, 600);\n\n    cursors = game.input.keyboard.createCursorKeys();\n\n    snakeHead = game.add.sprite(400, 300, 'ball');\n    snakeHead.anchor.setTo(0.5, 0.5);\n\n    game.physics.enable(snakeHead, Phaser.Physics.ARCADE);\n\n    //  Init snakeSection array\n    for (var i = 1; i <= numSnakeSections - 1; i++) var x = 0.5;\n    var y = 0.5;\n    {\n        snakeSection[i] = game.add.sprite(400, 300, 'ball');\n        snakeSection[i].anchor.setTo(x, y);\n    }\n\n    //  Init snakePath array\n    for (var i = 0; i <= numSnakeSections * snakeSpacer; i++) {\n        snakePath[i] = new Phaser.Point(400, 300);\n    }\n}\n\nfunction update() {\n\n    snakeHead.body.velocity.setTo(0, 0);\n    snakeHead.body.angularVelocity = 0;\n\n    if (cursors.up.isDown) {\n        snakeHead.body.velocity.copyFrom(game.physics.arcade.velocityFromAngle(snakeHead.angle, 300));\n\n        // Everytime the snake head moves, insert the new location at the start of the array,\n        // and knock the last position off the end\n\n        var part = snakePath.pop();\n\n        part.setTo(snakeHead.x, snakeHead.y);\n\n        snakePath.unshift(part);\n\n        for (var i = 1; i <= numSnakeSections - 1; i++) {\n            snakeSection[i].x = snakePath[i * snakeSpacer].x;\n            snakeSection[i].y = snakePath[i * snakeSpacer].y;\n            snakeSection[i].body.checkCollision.up = true;\n            snakeSection[i].body.checkCollision.down = true;\n        }\n    }\n\n    if (cursors.left.isDown) {\n        snakeHead.body.angularVelocity = -300;\n    } else if (cursors.right.isDown) {\n        snakeHead.body.angularVelocity = 300;\n    }\n\n    game.world.wrap(snakeHead, 0, true);\n}\nfunction render() {\n\n    // game.debug.spriteInfo(snakeHead, 32, 32);\n\n}","ast":null,"map":{"version":3,"sources":["/client/games/breakout.js"],"names":[],"mappings":"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","file":"/client/games/breakout.js.map","sourcesContent":["var game = new Phaser.Game(800, 600, Phaser.CANVAS, 'phaser-example', { preload: preload, create: create, update: update,render : render });\n\nfunction preload() {\n\n    game.load.image('ball','./assets/games/breakout/emojis/1.png');\n\n}\n\nvar snakeHead; //head of snake sprite\nvar snakeSection = new Array(); //array of sprites that make the snake body sections\nvar snakePath = new Array(); //arrary of positions(points) that have to be stored for the path the sections follow\nvar numSnakeSections = 4; //number of snake body sections\nvar snakeSpacer = 10; //parameter that sets the spacing between sections\n\nfunction create() {\n\n    game.stage.backgroundColor = \"#FFF\";\n    game.physics.startSystem(Phaser.Physics.ARCADE);\n    game.world.setBounds(0, 0, 800, 600);\n\n    cursors = game.input.keyboard.createCursorKeys();\n\n    snakeHead = game.add.sprite(400, 300, 'ball');\n    snakeHead.anchor.setTo(0.5, 0.5);\n\n    game.physics.enable(snakeHead, Phaser.Physics.ARCADE);\n\n\n    //  Init snakeSection array\n    for (var i = 1; i <= numSnakeSections-1; i++)\n    var x = 0.5;\n    var y = 0.5;\n    {\n        snakeSection[i] = game.add.sprite(400, 300, 'ball');\n        snakeSection[i].anchor.setTo(x, y);\n    }\n\n    //  Init snakePath array\n    for (var i = 0; i <= numSnakeSections * snakeSpacer; i++)\n    {\n        snakePath[i] = new Phaser.Point(400, 300);\n    }\n\n}\n\nfunction update() {\n\n    snakeHead.body.velocity.setTo(0, 0);\n    snakeHead.body.angularVelocity = 0;\n\n    if (cursors.up.isDown)\n    {\n        snakeHead.body.velocity.copyFrom(game.physics.arcade.velocityFromAngle(snakeHead.angle, 300));\n\n        // Everytime the snake head moves, insert the new location at the start of the array,\n        // and knock the last position off the end\n\n        var part = snakePath.pop();\n\n        part.setTo(snakeHead.x, snakeHead.y);\n\n        snakePath.unshift(part);\n\n        for (var i = 1; i <= numSnakeSections - 1; i++)\n        {\n          snakeSection[i].x = (snakePath[i * snakeSpacer]).x;\n          snakeSection[i].y = (snakePath[i * snakeSpacer]).y;\n          snakeSection[i].body.checkCollision.up = true;\n          snakeSection[i].body.checkCollision.down = true;\n        }\n\n    }\n\n    if (cursors.left.isDown)\n    {\n        snakeHead.body.angularVelocity = -300;\n    }\n    else if (cursors.right.isDown)\n    {\n        snakeHead.body.angularVelocity = 300;\n    }\n\n    game.world.wrap(snakeHead, 0, true);\n\n}\nfunction render() {\n\n    // game.debug.spriteInfo(snakeHead, 32, 32);\n\n}\n"]},"hash":"7f5fa2f00d1496863d90819b81b1d267d583b798"}
